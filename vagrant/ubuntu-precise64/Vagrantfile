# -*- mode: ruby -*-
# vi: set ft=ruby :


# ------------------ USAGE EXAMPLE --------------------
# -- Install virtualbox, vagrant AND NFS (exemple debian-like)
# > sudo apt-get install nfs-kernel-server nfs-common portmap virtualbox
# get latest vagrant from
# http://downloads.vagrantup.com/
# Exemple: version 1.3.3, paquet .deb pour debian/ubuntu, archi 64bits
# -- attention pas le 1.3.4, bug sur hostname avec debian
# > wget http://files.vagrantup.com/packages/db8e7a9c79b23264da129f55cf8569167fc22415/vagrant_1.3.3_x86_64.deb
# > sudo dpkg -i vagrant_1.3.3_x86_64.deb
# -- ALL
# > mkdir -p ~/makina/devhost
# > cd ~/makina/devhost
# > wget https://github.com/makinacorpus/docker-vms/raw/master/vagrant/ubuntu-precise64/Vagrantfile
# > vagrant up # first time will be quite long
# > vagrant ssh # to connect inside
# > vagrant halt/vagrant suspend # suspend will use more disk space but will be faster to reopen
# > vagrant destroy # the end of everything

# --------------------- CONFIGURATION ZONE ----------------------------------
# MEMORY SIZE OF THE VM (the more you can, like 1024 or 2048, this is the VM hosting all your projects dockers)
MEMORY="1024"
# Number of available CPU for this VM
CPUS="2"
# LIMIT ON CPU USAGE
MAX_CPU_USAGE_PERCENT="50"
# Use this IP in your /etc/hosts for all names
# That you want to query this BOX with in your browser
# The VirtualBox private network will
# automatically be set to ensure private communications
# between this VM and your host on this IP
# (in VB's preferences network you can see it after first usage)
BOX_PRIVATE_IP="10.0.42.42"
#BOX_PRIVATE_NETMASK="255.225.255.0"
# Name on your VirtualBox panel
VIRTUALBOX_VM_NAME="Dev Docker Host Ubuntu precise64"
# Name inside the VM (as rendered buy hostname command)
VM_HOSTNAME="devhost.local"
# Set this to true ONLY if you have VirtualBox version > 4.2.12
# else the synced folder would not work. 
# When activated this would remove warnings about version mismatch of
# VirtualBox Guest additions, but we need at least the 4.2.12 version,
# v 4.2.0 is present in the ubuntu kernel and we add the 4.2.12 in this script
# even if your host is on a lower version. If you have something greater than
# 4.2.12 set this to true, comment the 4.2.12 install below and install vbguest
# vagrant plugin with this command : "vagrant plugin install vagrant-vbguest"
AUTO_UPDATE_VBOXGUEST_ADD=false
# ----------------- END CONFIGURATION ZONE ----------------------------------

# ------------- BASE IMAGE UBUNTU LTS 12.04 (precise) -----------------------
# You can pre-download this image with
# vagrant box add precise64 http://files.vagrantup.com/precise64.box
BOX_NAME=ENV['BOX_NAME'] || "precise64"
BOX_URI=ENV['BOX_URI'] || "http://files.vagrantup.com/precise64.box"

# -- Other things ----------------------------------------------------------

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#Vagrant::Config.run do |config|
Vagrant.configure("2") do |config|
  # Setup virtual machine box. This VM configuration code is always executed.
  config.vm.box = BOX_NAME
  config.vm.box_url = BOX_URI
  #config.ssh.username = "ubuntu"
  #config.ssh.username = "vagrant"
  config.vm.host_name = VM_HOSTNAME
  config.vm.provider "virtualbox" do |vb|
      vb.name=VIRTUALBOX_VM_NAME
  end

  # -- VirtualBox Guest Additions ----------
  config.vbguest.auto_update = AUTO_UPDATE_VBOXGUEST_ADD

  #------------- NETWORKING ----------------
  # 2 NETWORKS DEFINED, 1 NAT, 1 HOST ONLY
  # The default one is a NAT one, automatically done by vagrant, allows internal->external
  #   and some NAT port  mappings (by defaut a 2222->22 is managed bu vagrant
  # The public one is commented by default will give you an easy access to outside
  # The private one will let you ref your dev things with a static IP
  # in your /etc/hosts
  #
  # 1st network is bridging (public DHCP) on eth0 of yout machine
  # If you do not have an eth0 Vagrant will ask you for an interface
  #config.vm.network "public_network", :bridge => 'eth0'
  #config.vm.network "private_network", ip: BOX_PRIVATE_IP, netmask: BOX_PRIVATE_NETMASK
  config.vm.network "private_network", ip: BOX_PRIVATE_IP
  # NAT PORTS, if you want...
  #config.vm.network "forwarded_port", guest: 80, host: 8080  
  #config.vm.network "forwarded_port", guest: 22, host: 2222  

  #------------ SHARED FOLDERS ----------------------------
  # The current directory is mapped to the /srv of the mounted host
  # In this /srv we'll find the salt-stack things and projects
  # we use NFS to avoid speed penalities on VirtualBox (between *10 and *100)
  # and the "sendfile" bugs with nginx and apache
  #config.vm.synced_folder ".", "/srv/",owner: "vagrant", group: "vagrant"
  # be careful, we neded to ALLOW ROOT OWNERSHIP on this /srv directory, so "no_root_squash" option
  config.vm.synced_folder ".", "/srv/", nfs: true, linux__nfs_options: ["rw","no_root_squash","no_subtree_check"]
#rw,no_subtree_check,all_squash,anonuid=1000,anongid=1000,fsid=3119311264
#rw,no_subtree_check,,anonuid=0,anongid=0,fsid=149022127
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "/etc", "/mnt/parent_etc", id: 'parent-etc', nfs: true

  #------------- PROVISIONING ------------------------------
  if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/default/*/id").empty?
    # Provision docker and new kernel if deployment was not done.
    # It is assumed Vagrant can successfully launch the provider instance.
    pkg_cmd = [
        "echo STARTING INITIAL PROVISIONNING, this may take a while...",
    ]
    # Add Ubuntu raring backported kernel
    pkg_cmd += [
      "apt-get update -qq",
      "apt-get install -q -y linux-image-generic-lts-raring linux-headers-generic-lts-raring ",
    ]
    # Add nfs support
    pkg_cmd += [
      "apt-get install nfs-common portmap",
    ]
    # Add lxc-docker package
    pkg_cmd += [
      "wget -q -O - https://get.docker.io/gpg | apt-key add -",
      "echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list",
      "apt-get update -qq; apt-get install -q -y --force-yes lxc-docker",
    ]
    # Add guest additions if local vbox VM.
    pkg_cmd += [
        %{cat << EOF > /root/provision_script.sh
if [ ! -f /root/vboxguest4.2.12.ok ]; then
  echo "Enforce VBoxGuestAdditions 4.2.12..."
  cd /tmp
  wget -q http://dlc.sun.com.edgesuite.net/virtualbox/4.2.12/VBoxGuestAdditions_4.2.12.iso
  apt-get install -q -y linux-headers-generic-lts-raring dkms
  mount -o loop,ro /tmp/VBoxGuestAdditions_4.2.12.iso /mnt
  echo yes | /mnt/VBoxLinuxAdditions.run
  umount /mnt
  rm /tmp/VBoxGuestAdditions_4.2.12.iso
  touch /root/vboxguest4.2.12.ok
fi
if [ -f /srv/Vagrantfile ]; then
  if [ ! -f /root/salt_bootstrap_done ]; then
    echo "Bootstrap Salt env..."
    export SALT_BOOT=''
    wget http://raw.github.com/makinacorpus/makina-states/master/_scripts/boot-salt.sh -O - | bash
    . /etc/profile
  fi
fi
EOF},
        "chmod 700 /root/provision_script.sh",
        "/root/provision_script.sh",
    ]
    pkg_cmd << %{echo -e "\nSETUP SUCCESSFUL...\n"}
    config.vm.provision :shell, :inline => pkg_cmd.join("\n")
  else
    # vagrant 1.3 HACK: provision is now run only at first boot, we want to run it every time
    if File.exist?("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")
      # hack: remove this "provision-is-done" marker
      File.delete("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")
    end
    # NFS mounts are done at the end, so salt-stack and docker services
    # using the /srv tree cannot be started before the end of vagrant
    # boot. We use the provisionner to start them after all theses things
    pkg_cmd = [
      "echo Basic daemons using /srv PROVISIONNING",
      "echo /srv is mounted quite late so we must start salt-stack daemons later",
      "service salt-master start",
      "service salt-minion start",
      "salt '*' state.highstate",
    ]
    config.vm.provision :shell, :inline => pkg_cmd.join("\n")
  end

end


# Providers were added on Vagrant >= 1.1.0
Vagrant::VERSION >= "1.1.0" and Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--memory", MEMORY]
    vb.customize ["modifyvm", :id, "--cpus", CPUS]
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", MAX_CPU_USAGE_PERCENT]
  end
end

