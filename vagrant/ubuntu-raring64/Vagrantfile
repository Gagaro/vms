# -*- mode: ruby -*-
# vim: set ft=ruby ts=2 et sts=2 tw=0:
#
# current strace where lockin
# [pid 11295] close(59)                   = 0
# [pid 11295] access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
# [pid 11295] open("/lib/x86_64-linux-gnu/libresolv.so.2", O_RDONLY|O_CLOEXEC) = 59
# [pid 11295] read(59, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320:\0\0\0\0\0\0"..., 832) = 832
# [pid 11295] fstat(59, {st_mode=S_IFREG|0644, st_size=97144, ...}) = 0
# [pid 11295] mmap(NULL, 2202280, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 59, 0) = 0x7f9a577b3000
# [pid 11295] mprotect(0x7f9a577c9000, 2097152, PROT_NONE) = 0
# [pid 11295] mmap(0x7f9a579c9000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 59, 0x16000) = 0x7f9a579c9000
# [pid 11295] mmap(0x7f9a579cb000, 6824, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f9a579cb000
# [pid 11295] close(59)                   = 0
# [pid 11295] mprotect(0x7f9a579c9000, 4096, PROT_READ) = 0
# [pid 11295] mprotect(0x7f9a57bd2000, 4096, PROT_READ) = 0
# [pid 11295] munmap(0x7f9a662a1000, 30718) = 0
# [pid 11295] stat("/etc/resolv.conf", {st_mode=S_IFREG|0644, st_size=171, ...}) = 0
# [pid 11295] socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 59
# [pid 11295] connect(59, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("10.0.2.3")}, 16) = 0
# [pid 11295] gettimeofday({1381099796, 139497}, NULL) = 0
# [pid 11295] poll([{fd=59, events=POLLOUT}], 1, 0) = 1 ([{fd=59, revents=POLLOUT}])
# [pid 11295] sendto(59, "I\260\1\0\0\1\0\0\0\0\0\0\7devhost\5local\0\0\34\0\1", 31, MSG_NOSIGNAL, NULL, 0) = 31
# [pid 11295] poll([{fd=59, events=POLLIN}], 1, 5000 <unfinished ...>
# [pid 11284] open("/srv/salt/makina-states/src/salt/salt/modules/functools.so", O_RDONLY) = -1 ENOENT (No such file or #
#
# ------------------ USAGE EXAMPLE --------------------
# -- Install virtualbox, vagrant AND NFS (exemple debian-like)
# > sudo apt-get install nfs-kernel-server nfs-common portmap virtualbox
# get latest vagrant from
# http://downloads.vagrantup.com/
# Exemple: version 1.3.3, paquet .deb pour debian/ubuntu, archi 64bits
# -- attention pas le 1.3.4, bug sur hostname avec debian
#    wget http://files.vagrantup.com/packages/db8e7a9c79b23264da129f55cf8569167fc22415/vagrant_1.3.3_x86_64.deb
#    sudo dpkg -i vagrant_1.3.3_x86_64.deb
#    sudo apt-get install nfs-kernel-server
# -- ALL
#   mkdir -p ~/makina/devhost
#   cd ~/makina/devhost
#   wget https://raw.github.com/makinacorpus/docker-vms/master/vagrant/ubuntu-raring64/Vagrantfile
#   vagrant up # first time will be quite long
#   vagrant ssh # to connect inside
#   vagrant halt/vagrant suspend # suspend will use more disk space but will be faster to reopen
#   vagrant destroy # the end of everything
#
# If you want to improve perfomances specially network related, please read the end of this file
# --------------------- CONFIGURATION ZONE ----------------------------------
# MEMORY SIZE OF THE VM (the more you can, like 1024 or 2048, this is the VM hosting all your projects dockers)
MEMORY="1024"
# Number of available CPU for this VM
CPUS="2"
# LIMIT ON CPU USAGE
MAX_CPU_USAGE_PERCENT="50"
# Use this IP in your /etc/hosts for all names
# That you want to query this BOX with in your browser
# The VirtualBox private network will
# automatically be set to ensure private communications
# between this VM and your host on this IP
# (in VB's preferences network you can see it after first usage)
BOX_PRIVATE_IP="10.0.42.43"
#BOX_PRIVATE_NETMASK="255.225.255.0"
# Name on your VirtualBox panel
VIRTUALBOX_VM_NAME="Docker DevHost Ubuntu Raring64"
# Name inside the VM (as rendered buy hostname command)
VM_HOSTNAME="devhost.local"
# Set this to true ONLY if you have VirtualBox version > 4.2.12
# else the synced folder would not work.
# When activated this would remove warnings about version mismatch of
# VirtualBox Guest additions, but we need at least the 4.2.12 version,
# v 4.2.10 is present in the ubuntu kernel and we add the 4.2.12 in this script
# even if your host is on a lower version. If you have something greater than
# 4.2.12 set this to true, comment the 4.2.12 install below and install vbguest
# vagrant plugin with this command : "vagrant plugin install vagrant-vbguest"
AUTO_UPDATE_VBOXGUEST_ADD=false
# ----------------- END CONFIGURATION ZONE ----------------------------------

# ------------- BASE IMAGE UBUNTU 13.04 (raring) -----------------------
# You can pre-download this image with
# vagrant box add raring64 http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box
BOX_NAME=ENV['BOX_NAME'] || "raring64"
BOX_URI=ENV['BOX_URI'] || "http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box"

# -- Other things ----------------------------------------------------------

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#Vagrant::Config.run do |config|
Vagrant.configure("2") do |config|
  # Setup virtual machine box. This VM configuration code is always executed.
  config.vm.box = BOX_NAME
  config.vm.box_url = BOX_URI
  #config.ssh.username = "ubuntu"
  #config.ssh.username = "vagrant"
  config.vm.host_name = VM_HOSTNAME
  config.vm.provider "virtualbox" do |vb|
      vb.name=VIRTUALBOX_VM_NAME
  end

  # -- VirtualBox Guest Additions ----------
  if Vagrant.has_plugin?('vbguest management')
    config.vbguest.auto_update = AUTO_UPDATE_VBOXGUEST_ADD
  end

  #------------- NETWORKING ----------------
  # 2 NETWORKS DEFINED, 1 NAT, 1 HOST ONLY
  # The default one is a NAT one, automatically done by vagrant, allows internal->external
  #   and some NAT port  mappings (by defaut a 2222->22 is managed bu vagrant
  # The public one is commented by default will give you an easy access to outside
  # The private one will let you ref your dev things with a static IP
  # in your /etc/hosts
  #
  # 1st network is bridging (public DHCP) on eth0 of yout machine
  # If you do not have an eth0 Vagrant will ask you for an interface
  #config.vm.network "public_network", :bridge => 'eth0'
  #config.vm.network "private_network", ip: BOX_PRIVATE_IP, netmask: BOX_PRIVATE_NETMASK
  config.vm.network "private_network", ip: BOX_PRIVATE_IP
  # NAT PORTS, if you want...
  #config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network "forwarded_port", guest: 22, host: 2222

  #------------ SHARED FOLDERS ----------------------------
  # The current directory is mapped to the /srv of the mounted host
  # In this /srv we'll find the salt-stack things and projects
  # we use NFS to avoid speed penalities on VirtualBox (between *10 and *100)
  # and the "sendfile" bugs with nginx and apache
  #config.vm.synced_folder ".", "/srv/",owner: "vagrant", group: "vagrant"
  # be careful, we neded to ALLOW ROOT OWNERSHIP on this /srv directory, so "no_root_squash" option
  config.vm.synced_folder ".", "/srv/", nfs: true, linux__nfs_options: ["rw", "no_root_squash", "no_subtree_check"]
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "/etc", "/mnt/parent_etc", id: 'parent-etc', nfs: true

  #------------- PROVISIONING ------------------------------
  # We push all the code in a script which manages the versioning of
  # provisioning.
  # Since vagrant 1.3.0 provisioning is run only on the first "up"
  # or when --provision is used. But we need to run this script
  # on each up/reload, so that at least this script can handle the
  # launch of daemons which depends on NFS /srv mount which is done quite
  # late by vagrant and cannot be done on upstart. So first let's remove
  # the one-time provisioning marker

  # vagrant 1.3 HACK: provision is now run only at first boot, we want to run it every time
  if File.exist?("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")
    # hack: remove this "provision-is-done" marker
    File.delete("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")
  end

  # To manage edition rights sync between the VM and the local host
  # we need to ensure the current user is member of a salt-admin-vm group (gid: 65753) and
  # that this group exists
  require 'etc'
  newgid = 65753 # the most important
  newgroup = 'salt-admin-vm'
  user = Etc.getlogin

  # detect current host OS
  require 'rbconfig'

  def os
    @os ||= (
      host_os = RbConfig::CONFIG['host_os']
      case host_os
      when /darwin|mac os/
        :macosx
      when /linux/
        :linux
      when /solaris|bsd/
        :unix
      else
        raise Error::WebDriverError, "Non supported os: #{host_os.inspect}"
      end
    )
  end

  #printf(" [*] Checking if local group %s exists\n", newgroup )
  # also search for a possible custom name
  found = false
  Etc.group {|g|
    if g.gid == newgid
      found = true
      newgroup = g.name
      break
    end
  }
  if !found
    printf(" [*] local group %s does not exists, creating it\n", newgroup)
    if os == :linux or os == :unix
      # Unix
      `sudo groupadd -g #{newgid} #{newgroup}`
    else
      # Mac
      `sudo dscl . -create /groups/#{newgroup} gid #{newgid}`
    end
  end
  #  printf(" [*] Checking if current user %s is member of group %s\n", user, newgroup)
  # loop on members of newgid to find our user
  found = false
  Etc.getgrgid(newgid).mem.each { |u|
    if u == user
      found = true
      break
    end
  }
  if !found
    printf(" [*] User %s is not member of group %s, adding him\n", user, newgroup)
    if os == :linux or os == :unix
      # Nunux
      `sudo gpasswd -a #{user} #{newgroup}`
    else
      #Mac
      `sudo dseditgroup -o edit -t user -a #{user} #{newgroup}`
    end
  end

  # Now generate the provision script, put it inside /root VM's directory and launch it
  pkg_cmd = [
      %{cat > /root/provision_script.sh  << EOF
#!/bin/bash
echo " [*] STARTING MAKINA VAGRANT PROVISION SCRIPT /root/provision_script.sh"
export DEBIAN_FRONTEND=noninteractive
if [ ! -f /root/vboxguest4.2.12.ok ]; then
  # Add guest additions if local vbox VM.
  echo " [*] Enforce VBoxGuestAdditions 4.2.12..."
  cd /tmp
  echo " [*] download iso image..."
  wget -q "http://dlc.sun.com.edgesuite.net/virtualbox/4.2.12/VBoxGuestAdditions_4.2.12.iso"
  echo " [*] install dkms and kernel headers..."
  apt-get install -q -y linux-headers-generic dkms
  echo " [*] mount iso and run install"
  mount -o loop,ro /tmp/VBoxGuestAdditions_4.2.12.iso /mnt
  echo yes | /mnt/VBoxLinuxAdditions.run
  umount /mnt
  rm /tmp/VBoxGuestAdditions_4.2.12.iso
  touch /root/vboxguest4.2.12.ok
fi

if [ -f /srv/Vagrantfile ]; then

  if [ ! -e /root/provision_step_kernel_done ]; then
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.10.14-saucy/linux-headers-3.10.14-031014_3.10.14-031014.201310011335_all.deb
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.10.14-saucy/linux-headers-3.10.14-031014-generic_3.10.14-031014.201310011335_amd64.deb
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.10.14-saucy/linux-image-3.10.14-031014-generic_3.10.14-031014.201310011335_amd64.deb
    dpkg -i *3.10.14*deb
    touch /root/provision_step_kernel_done
  fi

  if [ ! -e /root/provision_step_nfs_done ]; then
    echo " [*] Install nfs support on guest"
    apt-get install -q -y --force-yes nfs-common portmap
    if [ "0" == "$?" ];then touch /root/provision_step_nfs_done; fi;
  fi

  if [ ! -e /root/provision_step_lxc_done ]; then
    echo " [*] Install lxc-docker support"
    # Add lxc-docker package
    wget -q -O - https://get.docker.io/gpg | apt-key add -
    echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list
    apt-get update -qq;
    apt-get install -q -y --force-yes lxc-docker
    # autorestart dockers on boot
    sed -re "s/docker -d/docker -r -d/g" -e /etc/init/docker.conf
    service docker restart
    if [ "0" == "$?" ];then touch /root/provision_step_lxc_done; fi;
  fi

  if [ ! -e /root/provision_step_lang_done ]; then
    echo " [*] fix french language"
    apt-get install -q -y --force-yes language-pack-fr
    echo>/etc/locale.gen
    echo "en_US.UTF-8 UTF-8">>/etc/locale.gen
    echo "en_US ISO-8859-1">>/etc/locale.gen
    echo "de_DE.UTF-8 UTF-8">>/etc/locale.gen
    echo "de_DE ISO-8859-1">>/etc/locale.gen
    echo "de_DE@euro ISO-8859-15">>/etc/locale.gen
    echo "fr_FR.UTF-8 UTF-8">>/etc/locale.gen
    echo "fr_FR ISO-8859-1">>/etc/locale.gen
    echo "fr_FR@euro ISO-8859-15">>/etc/locale.gen
    echo 'LANG="fr_FR.utf8"'>/etc/default/locale
    echo "export LANG=\${LANG:-fr_FR.UTF-8}">>/etc/profile.d/0_lang.sh
    /usr/sbin/locale-gen
    update-locale LANG=fr_FR.utf8
    if [ "0" == "$?" ];then touch /root/provision_step_lang_done; fi;
  fi

  if [ ! -e /root/salt_bootstrap_done ]; then
    echo " [ * ] Bootstrap Salt-Stack env..."
    export SALT_BOOT=''
    wget http://raw.github.com/makinacorpus/makina-states/master/_scripts/boot-salt.sh -O - | bash
    . /etc/profile
  fi

  # Always start salt and docker AFTER /srv has been mounted on the VM
  echo " [*] Manage Basic daemons using /srv"
  echo " [*] /srv is mounted quite late so we must start some daemons later"
  # kill salt that may be running
  ps aux|egrep "salt-(master|minion|syndic)"|awk '{print $2}'|xargs kill -9 &> /dev/null
  service salt-master start
  service salt-minion start
  service docker stop
  service docker start
  #salt '*' state.highstate
  #salt '*' state.sls setup
  echo " [*] VM is now ready for vagrant ssh or other usages..."

else
  # Try to install nfs on the guest for next reboot
  if [ ! -d "/srv" ]; then
    mkdir /srv
  fi
  if [ ! -f /root/provision_step_nfs_done ]; then
    apt-get update -qq
    apt-get install nfs-common portmap
    if [ "0" == "$?" ];then touch /root/provision_step_nfs_done; fi;
  fi
  echo " [*] ERROR: You do not have /srv/Vagrantfile, this means vagrant did not mount the vagrant directory in /srv, this VM wont be able to do anything usefull. Fix it!"
fi

EOF},
    "chmod 700 /root/provision_script.sh",
    "/root/provision_script.sh",
  ]
  config.vm.provision :shell, :inline => pkg_cmd.join("\n")
end

# Providers were added on Vagrant >= 1.1.0
Vagrant::VERSION >= "1.1.0" and Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--memory", MEMORY]
    vb.customize ["modifyvm", :id, "--cpus", CPUS]
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", MAX_CPU_USAGE_PERCENT]
  end
end

# NOTE: right know you need to use a very uptodate kernel not to suffer from big slowness on ubuntu
# To improve performance of virtualisation, you need a kernel > 3.10
#
# install a recent kernel:
#   wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.10.14-saucy/linux-headers-3.10.14-031014_3.10.14-031014.201310011335_all.deb
#   wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.10.14-saucy/linux-headers-3.10.14-031014-generic_3.10.14-031014.201310011335_amd64.deb
#   wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.10.14-saucy/linux-image-3.10.14-031014-generic_3.10.14-031014.201310011335_amd64.deb
#   dpkg -i *3.10.14*deb
#
# If you use nvidia drivers, you need nvidia>325 to run on kernel 3.10+:
#   sudo add-apt-repository ppa:xorg-edgers/ppa
#   sudo add-apt-repository ppa:bumblebee/stable
#   sudo apt-get update
#   sudo apt-get purge nvidia-304 nvidia-settings-304
#   apt-get install nvidia-325 nvidia-settings-325
#   # If you have optimus based chipset you will need to upgrade your bumblebee setup:
#     sudo apt-get install bumblebee bumblebee-nvidia primus primus-libs-ia32:i386 virtualgl
#   # Then, edit in /etc/bumblebee/bumblebee.conf
#     KernelDriver=nvidia_325
#     LibraryPath=/usr/lib/nvidia-325/:/usr/lib32/nvidia-325:/usr/lib/nvidia-current:/usr/lib32/nvidia-current
#     XorgModulePath=/usr/lib/nvidia-325/xorg,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules
#   # You can then use nvidia settings as usual:
#     optirun nvidia-settings -c :8
#
#   # finally remove this edge repo:
#     sudo add-apt-repository --remove ppa:xorg-edgers:ppa
#
