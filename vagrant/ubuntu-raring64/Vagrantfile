# -*- mode: ruby -*-
# vim: set ft=ruby ts=2 et sts=2 tw=0 ai:
#
# current strace where lockin
# DNS 10.0.2.3 does not work, mess with dnsmasq, need to investigate more
#
# ------------------ USAGE EXAMPLE --------------------
# -- Install virtualbox, vagrant AND NFS (exemple debian-like)
# > sudo apt-get install nfs-kernel-server nfs-common portmap virtualbox
# get latest vagrant from
# http://downloads.vagrantup.com/
# Eg: version 1.3.3, paquet .deb pour debian/ubuntu, archi 64bits
# -- WARNING NOT 1.3.4, bug ON hostname with Debian
#    wget http://files.vagrantup.com/packages/db8e7a9c79b23264da129f55cf8569167fc22415/vagrant_1.3.3_x86_64.deb
#    sudo dpkg -i vagrant_1.3.3_x86_64.deb
#    sudo apt-get install nfs-kernel-server
#
# -- ALL
#   mkdir -p ~/makina/devhost
#   cd ~/makina/devhost
#   wget https://raw.github.com/makinacorpus/docker-vms/master/vagrant/ubuntu-raring64/Vagrantfile
#   vagrant up # first time will be quite long
#   vagrant ssh # to connect inside
#   vagrant halt/vagrant suspend # suspend will use more disk space but will be faster to reopen
#   vagrant destroy # the end of everything
#
# !!!!!!!!!!!!!!!!:
# !!! IMPORTANT !!!
# !!!!!!!!!!!!!!!!!
# If you want to improve perfomances specially network related, please read the end of this file
# --------------------- CONFIGURATION ZONE ----------------------------------

UBUNTU_RELEASE="raring"
UBUNTU_LTS_RELEASE="precise"
UBUNTU_NEXT_RELEASE="saucy"

# MEMORY SIZE OF THE VM (the more you can, like 1024 or 2048, this is the VM hosting all your projects dockers)
MEMORY="1024"
# Number of available CPU for this VM
CPUS="2"
# LIMIT ON CPU USAGE
MAX_CPU_USAGE_PERCENT="50"
# Use this IP in your /etc/hosts for all names
# That you want to query this BOX with in your browser
# The VirtualBox private network will
# automatically be set to ensure private communications
# between this VM and your host on this IP
# (in VB's preferences network you can see it after first usage)
BOX_PRIVATE_IP="10.0.42.43"
# Custom dns server
DNS_SERVER="8.8.8.8"
#BOX_PRIVATE_NETMASK="255.225.255.0"
# Name on your VirtualBox panel
VIRTUALBOX_VM_NAME="Docker DevHost Ubuntu "+UBUNTU_RELEASE+"64"
# Name inside the VM (as rendered buy hostname command)
VM_HOSTNAME="devhost.local"
# Set this to true ONLY if you have VirtualBox version > 4.2.12
# else the synced folder would not work.
# When activated this would remove warnings about version mismatch of
# VirtualBox Guest additions, but we need at least the 4.2.12 version,
# v 4.2.0 is present in the default precise ubuntu kernel and 4.2.10 on
# raring and we add the 4.2.12 in this script
# even if your host is on a lower version. If you have something greater than
# 4.2.12 set this to true, comment the 4.2.12 install below and install vbguest
# vagrant plugin with this command : "vagrant plugin install vagrant-vbguest"
AUTO_UPDATE_VBOXGUEST_ADD=false
# ----------------- END CONFIGURATION ZONE ----------------------------------

# ------------- BASE IMAGE UBUNTU 13.04 (raring) -----------------------
# You can pre-download this image with
# vagrant box add raring64 http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box
BOX_NAME=ENV['BOX_NAME'] || UBUNTU_RELEASE+"64"
BOX_URI=ENV['BOX_URI'] || "http://cloud-images.ubuntu.com/vagrant/"+UBUNTU_RELEASE+"/current/"+UBUNTU_RELEASE+"-server-cloudimg-amd64-vagrant-disk1.box"


# ------------- Mirror to download packages -----------------------
LOCAL_MIRROR="http://fr.archive.ubuntu.com/ubuntu"
OFFICIAL_MIRROR="http://archive.ubuntu.com/ubuntu"
# let this one to the previous mirror for it to be automaticly replaced
PREVIOUS_LOCAL_MIRROR="http://fr.archive.ubuntu.com/ubuntu"
PREVIOUS_OFFICIAL_MIRROR="http://archive.ubuntu.com/ubuntu"

# -- Other things ----------------------------------------------------------

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#Vagrant::Config.run do |config|
Vagrant.configure("2") do |config|
  # Setup virtual machine box. This VM configuration code is always executed.
  config.vm.box = BOX_NAME
  config.vm.box_url = BOX_URI
  #config.ssh.username = "ubuntu"
  #config.ssh.username = "vagrant"
  config.vm.host_name = VM_HOSTNAME
  config.vm.provider "virtualbox" do |vb|
      vb.name=VIRTUALBOX_VM_NAME
  end

  # -- VirtualBox Guest Additions ----------
  if Vagrant.has_plugin?('vbguest management')
    config.vbguest.auto_update = AUTO_UPDATE_VBOXGUEST_ADD
  end

  #------------- NETWORKING ----------------
  # 2 NETWORKS DEFINED, 1 NAT, 1 HOST ONLY
  # The default one is a NAT one, automatically done by vagrant, allows internal->external
  #   and some NAT port  mappings (by defaut a 2222->22 is managed bu vagrant
  # The public one is commented by default will give you an easy access to outside
  # The private one will let you ref your dev things with a static IP
  # in your /etc/hosts
  #
  # 1st network is bridging (public DHCP) on eth0 of yout machine
  # If you do not have an eth0 Vagrant will ask you for an interface
  #config.vm.network "public_network", :bridge => 'eth0'
  #config.vm.network "private_network", ip: BOX_PRIVATE_IP, netmask: BOX_PRIVATE_NETMASK
  config.vm.network "private_network", ip: BOX_PRIVATE_IP
  # NAT PORTS, if you want...
  #config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network "forwarded_port", guest: 22, host: 2222

  #------------ SHARED FOLDERS ----------------------------
  # The current directory is mapped to the /srv of the mounted host
  # In this /srv we'll find the salt-stack things and projects
  # we use NFS to avoid speed penalities on VirtualBox (between *10 and *100)
  # and the "sendfile" bugs with nginx and apache
  #config.vm.synced_folder ".", "/srv/",owner: "vagrant", group: "vagrant"
  # be careful, we neded to ALLOW ROOT OWNERSHIP on this /srv directory, so "no_root_squash" option
  config.vm.synced_folder ".", "/srv/", nfs: true, linux__nfs_options: ["rw", "no_root_squash", "no_subtree_check"]
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "/etc", "/mnt/parent_etc", id: 'parent-etc', nfs: true

  #------------- PROVISIONING ------------------------------
  # We push all the code in a script which manages the versioning of
  # provisioning.
  # Since vagrant 1.3.0 provisioning is run only on the first "up"
  # or when --provision is used. But we need to run this script
  # on each up/reload, so that at least this script can handle the
  # launch of daemons which depends on NFS /srv mount which is done quite
  # late by vagrant and cannot be done on upstart. So first let's remove
  # the one-time provisioning marker

  # vagrant 1.3 HACK: provision is now run only at first boot, we want to run it every time
  if File.exist?("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")
    # hack: remove this "provision-is-done" marker
    File.delete("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")
  end

  # To manage edition rights sync between the VM and the local host
  # we need to ensure the current user is member of a salt-admin-vm group (gid: 65753) and
  # that this group exists
  require 'etc'
  newgid = 65753 # the most important
  newgroup = 'salt-admin-vm'
  user = Etc.getlogin

  # detect current host OS
  require 'rbconfig'

  def os
    @os ||= (
      host_os = RbConfig::CONFIG['host_os']
      case host_os
      when /darwin|mac os/
        :macosx
      when /linux/
        :linux
      when /solaris|bsd/
        :unix
      else
        raise Error::WebDriverError, "Non supported os: #{host_os.inspect}"
      end
    )
  end

  #printf(" [*] Checking if local group %s exists\n", newgroup )
  # also search for a possible custom name
  found = false
  Etc.group {|g|
    if g.gid == newgid
      found = true
      newgroup = g.name
      break
    end
  }
  if !found
    printf(" [*] local group %s does not exists, creating it\n", newgroup)
    if os == :linux or os == :unix
      # Unix
      `sudo groupadd -g #{newgid} #{newgroup}`
    else
      # Mac
      `sudo dscl . -create /groups/#{newgroup} gid #{newgid}`
    end
  end
  #  printf(" [*] Checking if current user %s is member of group %s\n", user, newgroup)
  # loop on members of newgid to find our user
  found = false
  Etc.getgrgid(newgid).mem.each { |u|
    if u == user
      found = true
      break
    end
  }
  if !found
    printf(" [*] User %s is not member of group %s, adding him\n", user, newgroup)
    if os == :linux or os == :unix
      # Nunux
      `sudo gpasswd -a #{user} #{newgroup}`
    else
      #Mac
      `sudo dseditgroup -o edit -t user -a #{user} #{newgroup}`
    end
  end

  printf(" [*] Set local host routing to be able to find host docker guests 172.17.0.0/16 via %s\n", BOX_PRIVATE_IP)
  `sudo route add -host #{BOX_PRIVATE_IP} gw 10.0.42.1 2>&1 | grep -v "exist"`
  `sudo route add -net 172.17.0.0 netmask 255.255.0.0 gw #{BOX_PRIVATE_IP} 2>&1 | grep -v "exist"`

  # Now generate the provision script, put it inside /root VM's directory and launch it
  pkg_cmd = [
      %{cat > /root/provision_script.sh  << EOF
#!/bin/bash
output() {
    echo "\\$@" >&2
}
die_if_error() {
    if [[ "\\$?" != "0" ]];then
        output "There were errors"
        exit 1
    fi
}
output " [*] STARTING MAKINA VAGRANT PROVISION SCRIPT /root/provision_script.sh"
DNS_SERVER="#{DNS_SERVER}"
PREVIOUS_OFFICIAL_MIRROR="#{PREVIOUS_OFFICIAL_MIRROR}"
PREVIOUS_LOCAL_MIRROR="#{PREVIOUS_LOCAL_MIRROR}"
OFFICIAL_MIRROR="#{OFFICIAL_MIRROR}"
LOCAL_MIRROR="#{LOCAL_MIRROR}"
UBUNTU_RELEASE="#{UBUNTU_RELEASE}"
UBUNTU_NEXT_RELEASE="#{UBUNTU_NEXT_RELEASE}"
CHRONO="\\$(date "+%F_%H-%M-%S")"
# DNS TMP OVERRIDE
cat > /etc/resolv.conf << DNSEOF
nameserver \\${DNS_SERVER}
nameserver 8.8.8.8
nameserver 4.4.4.4
DNSEOF
# order is important
LXC_PKGS="lxc apparmor apparmor-profiles"
KERNEL_PKGS="linux-source linux-image-generic linux-headers-generic linux-image-extra-virtual"
VB_PKGS="virtualbox virtualbox-dkms virtualbox-source virtualbox-qt"
VB_PKGS="\\$VB_PKGS virtualbox-guest-additions-iso virtualbox-guest-dkms virtualbox-guest-source"
VB_PKGS="\\$VB_PKGS virtualbox-guest-utils virtualbox-guest-x11 virtualbox-guest-dkms"
kernel_marker="/root/provision_step_kernel\\${UBUNTU_NEXT_RELEASE}_done"
lxc_marker="/root/vbox_lxc_from_${UBUNTU_NEXT_RELEASE}.ok"
vbox_marker="/root/vbox_vbox_from_\\${UBUNTU_NEXT_RELEASE}.ok"
# escape to 5 "antislash"
RE_PREVIOUS_OFFICIAL_MIRROR="\\$(echo "\\${PREVIOUS_OFFICIAL_MIRROR}" | sed -re "s/([.#/])/\\\\\\\\\\\\\\\\\\1/g")"
RE_PREVIOUS_LOCAL_MIRROR="\\$(echo "\\${PREVIOUS_LOCAL_MIRROR}"       | sed -re "s/([.#/])/\\\\\\\\\\\\\\\\\\1/g")"
RE_OFFICIAL_MIRROR="\\$(echo "\\${OFFICIAL_MIRROR}"                   | sed -re "s/([.#/])/\\\\\\\\\\\\\\\\\\1/g")"
RE_LOCAL_MIRROR="\\$(echo "\\${LOCAL_MIRROR}"                         | sed -re "s/([.#/])/\\\\\\\\\\\\\\\\\\1/g")"
RE_UBUNTU_RELEASE="\\$(echo "\\${UBUNTU_RELEASE}"                     | sed -re "s/([.#/])/\\\\\\\\\\\\\\\\\\1/g")"
NEED_RESTART=""
export DEBIAN_FRONTEND=noninteractive
mirror_marker="/root/vbox_pkg_2_init_repos_\\${OFFICIAL_MIRROR//\\//-}_\\${LOCAL_MIRROR//\\//-}_\\${PREVIOUS_LOCAL_MIRROR//\\//-}"
src_l="/etc/apt/sources.list"
# cleanup old failed provisions
if [[ "\\$(grep "\\$UBUNTU_NEXT_RELEASE" \\${src_l} | wc -l)" != "0" ]];then
    output " [*] Deactivating next-release(\\$UBUNTU_NEXT_RELEASE) repos"
    sed -re "s/\\$UBUNTU_NEXT_RELEASE/\\$UBUNTU_RELEASE/g" -i \\${src_l}
    apt-get update -qq
fi
if [ ! -e "\\$mirror_marker" ];then
    if [ ! -e "/root/vbox_pkg_1_initial_update" ];then
        # generate a proper commented /etc/apt/source.list
        output " [*] Initial upgrade"
        /usr/bin/cloud-init init
        /usr/bin/cloud-init modules --mode=config
        /usr/bin/cloud-init modules --mode=final
        cp "\\${src_l}" "\\${src_l}.\\${CHRONO}.sav" || die_if_error
        touch "/root/vbox_pkg_1_initial_update"
    fi
    output " [*] Activating some repos"
    sed -re "s/(.*deb(-src)?\\s+)(\\${RE_PREVIOUS_OFFICIAL_MIRROR}|\\${RE_PREVIOUS_LOCAL_MIRROR}|\\${RE_OFFICIAL_MIRROR})(.*)/\\1\\${RE_LOCAL_MIRROR}\\4/g" -i \\${src_l}
    sed -re "s/^(#|\\s)*(deb(-src)?\\s+[^ ]+\\s+(precise|raring|\\${UBUNTU_NEXT_RELEASE}|\\${UBUNTU_RELEASE})(-(updates|backports|security))?)\\s+(.*)/\\2 \\7/g" -i \\${src_l}
    for rel in \\$UBUNTU_RELEASE \\${UBUNTU_RELEASE}-updates;do
        for i in partner restricted universe multiverse main;do
            ADD_DEB=1
            ADD_DEBSRC=1
            if [[ "\\$i" == "partner" ]];then
                ADD_DEBSRC=""
                if [[ "\\$rel" != "\\$UBUNTU_RELEASE" ]];then
                    ADD_DEB=""
                fi
            fi
            if [[ ! "\\$(egrep "^deb\\s+.*\\s\\${rel}\\s*\\$i" \\${src_l}|wc -l)" == "0" ]];then
                ADD_DEB=""
            fi
            if [[ ! "\\$(egrep "^deb-src\\s+.*\\s\\${rel}\\s*\\$i" \\${src_l}|wc -l)" == "0" ]];then
                ADD_DEBSRC=""
            fi
            if [[ -n "\\$ADD_DEB" ]];then
                output " [*] Adding \\${i}@\\${rel} to repos"
                echo "deb \\${LOCAL_MIRROR} \\${rel} \\$i" >> \\${src_l}
            fi
            if [[ -n "\\$ADD_DEBSRC" ]];then
                output " [*] Adding \\${i}(src)@\\${rel} to repos"
                echo "deb-src \\${LOCAL_MIRROR} \\${rel} \\$i" >> \\${src_l}
            fi
        done
    done
    apt-get update -qq
    die_if_error
    touch "\\$mirror_marker"
fi
if [ ! -e "/root/vbox_init_global_upgrade" ];then
    output " [*] Upgrading base image"
    apt-get update -qq && apt-get upgrade -y && apt-get dist-upgrade -y
    die_if_error
    touch "/root/vbox_init_global_upgrade"
fi
if [ ! -e "\\$lxc_marker" ];then
    output " [*] Backporting Saucy LXC packages"
    sed -re "s/(precise|\\${UBUNTU_RELEASE})/\\${UBUNTU_NEXT_RELEASE}/g" -i "\\${src_l}" && \\
    apt-get update -qq && \\
    apt-get install -y --force-yes \\${LXC_PKGS}
    die_if_error
    sed -re "s/\\${UBUNTU_NEXT_RELEASE}/\\${UBUNTU_RELEASE}/g" -i "\\${src_l}" && apt-get update -qq
    die_if_error
    output " [*] The first time, you need to reload the new kernel and reprovision."
    output " [*] For that, issue now 'vagrant reload'"
    touch "\\$lxc_marker"
    NEED_RESTART=1
fi
if [ ! -e "\\$vbox_marker" ];then
    output " [*] Backporting Saucy Virtualbox packages"
    output " [*]   \\$VB_PKGS"
    sed -re "s/(precise|\\${UBUNTU_RELEASE})/\\${UBUNTU_NEXT_RELEASE}/g" -i \\${src_l} &&\\
    apt-get update -qq && apt-get install -y --force-yes \\$VB_PKGS
    die_if_error
    sed -re "s/\\${UBUNTU_NEXT_RELEASE}/\\${UBUNTU_RELEASE}/g" -i \\${src_l} && apt-get update -qq
    die_if_error
    output " [*] The first time, you need to reload the new kernel and reprovision."
    output " [*] For that, issue now 'vagrant reload'"
    touch "\\$vbox_marker"
    NEED_RESTART=1
fi
if [ ! -e "\\${kernel_marker}" ]; then
    output " [*] Backporting Saucy kernel (\\$KERNEL_PKGS)"
    sed -re "s/(precise|\\${UBUNTU_RELEASE})/\\${UBUNTU_NEXT_RELEASE}/g" -i \\${src_l} &&\\
    apt-get update -qq && apt-get install -y --force-yes \\$KERNEL_PKGS
    die_if_error
    sed -re "s/\\${UBUNTU_NEXT_RELEASE}/\\${UBUNTU_RELEASE}/g" -i \\${src_l} && apt-get update -qq
    die_if_error
    output " [*] The first time, you need to reload the new kernel and reprovision."
    output " [*] For that, issue now 'vagrant reload'"
    touch "\\$kernel_marker"
    NEED_RESTART=1
fi
if [[ -n \\$NEED_RESTART ]];then
    exit \\$NEED_RESTART
fi
if [ -f /srv/Vagrantfile ]; then
  if [[ ! -e "\\$kernel_marker" ]];then
    output " [*] The first time, you need to reload the new kernel and reprovision."
    output " [*] For that, issue now 'vagrant reload'"
    exit 1
  else
    if [ ! -e /root/provision_step_nfs_done ]; then
      output " [*] Install nfs support on guest"
      apt-get install -q -y --force-yes nfs-common portmap || die_if_error
      touch /root/provision_step_nfs_done
    fi
    if [ ! -e /root/provision_step_lxc_done ]; then
      output " [*] Install lxc-docker support"
      # Add lxc-docker package
      wget -c -q -O - https://get.docker.io/gpg | apt-key add -
      echo deb http://get.docker.io/ubuntu docker main > \\${src_l}.d/docker.list
      apt-get update -qq || die_if_error
      apt-get install -q -y --force-yes lxc-docker || die_if_error
      # autorestart dockers on boot
      sed -re "s/docker -d/docker -r -d/g" -e /etc/init/docker.conf
      service docker restart
      die_if_error
      touch /root/provision_step_lxc_done
      NEED_RESTART=1
    fi
    if [ ! -e /root/provision_step_lang_done ]; then
      output " [*] Fix French language"
      apt-get install -q -y --force-yes language-pack-fr
      echo>/etc/locale.gen
      echo "en_US.UTF-8 UTF-8">>/etc/locale.gen
      echo "en_US ISO-8859-1">>/etc/locale.gen
      echo "de_DE.UTF-8 UTF-8">>/etc/locale.gen
      echo "de_DE ISO-8859-1">>/etc/locale.gen
      echo "de_DE@euro ISO-8859-15">>/etc/locale.gen
      echo "fr_FR.UTF-8 UTF-8">>/etc/locale.gen
      echo "fr_FR ISO-8859-1">>/etc/locale.gen
      echo "fr_FR@euro ISO-8859-15">>/etc/locale.gen
      echo 'LANG="fr_FR.utf8"'>/etc/default/locale
      echo "export LANG=\${LANG:-fr_FR.UTF-8}">>/etc/profile.d/0_lang.sh
      /usr/sbin/locale-gen || die_if_error
      update-locale LANG=fr_FR.utf8 || die_if_error
      if [ "0" == "$?" ];then touch /root/provision_step_lang_done; fi;
    fi
    if [ ! -e /root/salt_bootstrap_done ]; then
      output " [ * ] Bootstrap Salt-Stack env..."
      export SALT_BOOT='server'
      if [ -e /src/salt/makina-states/src/salt ];then
        sed -re "s/filemode = true/filemode = false/g" -i /src/salt/makina-states/src/*/.git/config
      fi
      wget http://raw.github.com/makinacorpus/makina-states/master/_scripts/boot-salt.sh -O - | bash
      die_if_error
      . /etc/profile
      touch /root/salt_bootstrap_done
    fi
  fi
else
  # Try to install nfs on the guest for next reboot
  if [ ! -d "/srv" ]; then
    mkdir /srv
  fi
  if [ ! -f /root/provision_step_nfs_done ]; then
    output " [*] Installing nfs tools on guest for next reboot, please wait..."
    apt-get update -qq
    apt-get install nfs-common portmap
    if [ "0" == "$?" ];then touch /root/provision_step_nfs_done; fi;
  fi
  output " [*] ERROR: You do not have /srv/Vagrantfile, this means vagrant did not mount the vagrant directory in /srv, this VM wont be able to do anything usefull. Fix it and launch 'vagrant reload'!"
  exit 1
fi
if [[ -n \\$NEED_RESTART ]];then
    output "You need to reboot, issue 'vagrant reload'"
    exit \\$NEED_RESTART
fi
# Always start salt and docker AFTER /srv has been mounted on the VM
output " [*] Manage Basic daemons using /srv"
output " [*] /srv is mounted quite late so we must start some daemons later"
# kill salt that may be running
ps aux|egrep "salt-(master|minion|syndic)"|awk '{print $2}'|xargs kill -9 &> /dev/null
service salt-master start
rm -rf /etc/salt/pki/minion/minion_master.pub
service salt-minion start
service docker stop
service docker start
#salt '*' state.highstate
#salt '*' state.sls setup
output " [*] allow routing of traffic comingfrom dev host going to docker net"
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv4.conf.all.rp_filter=0
sysctl -w net.ipv4.conf.all.log_martians=1
output " [*] VM is now ready for vagrant ssh or other usages..."
EOF},
    "chmod 700 /root/provision_script.sh",
    "/root/provision_script.sh",
  ]
  config.vm.provision :shell, :inline => pkg_cmd.join("\n")
end

# Providers were added on Vagrant >= 1.1.0
Vagrant::VERSION >= "1.1.0" and Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--memory", MEMORY]
    vb.customize ["modifyvm", :id, "--cpus", CPUS]
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", MAX_CPU_USAGE_PERCENT]
  end
end

# NOTE: right know you need to use a very uptodate kernel not to suffer from big slowness on ubuntu
# To improve performance of virtualisation, you need a kernel > 3.10
# and the last virtualbox stuff
# Idea is to backport the official next-ubuntu kernel (Codename: saucy)
#
# install a recent kernel & last virtualbox (saucy backports):
#   ./backport-pkgs.sh
#
# If you use nvidia drivers, you need nvidia>325 to run on kernel 3.10+:
#  sudo add-apt-repository ppa:xorg-edgers/ppa
#  sudo add-apt-repository ppa:bumblebee/stable
#  sudo apt-get update
#  sudo apt-get purge nvidia-304 nvidia-settings-304
#  apt-get install nvidia-325 nvidia-settings-325
#  # If you have optimus based chipset you will need to upgrade your bumblebee setup:
#    sudo apt-get install bumblebee bumblebee-nvidia primus primus-libs-ia32:i386 virtualgl
#  # Then, edit in /etc/bumblebee/bumblebee.conf
#    KernelDriver=nvidia_325
#    LibraryPath=/usr/lib/nvidia-325/:/usr/lib32/nvidia-325:/usr/lib/nvidia-current:/usr/lib32/nvidia-current
#    XorgModulePath=/usr/lib/nvidia-325/xorg,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules
#  # You can then use nvidia settings as usual:
#    optirun nvidia-settings -c :8
#
#  # finally remove this edge repo:
#    sudo add-apt-repository --remove ppa:xorg-edgers:ppa
